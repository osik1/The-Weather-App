
// const expandBtn = document.querySelectorAll(".expand-btn");

/* When the user clicks on the button, 
toggle between hiding and showing the dropdown content */
const profile = document.querySelector('.profile-pic');
const dropdownMenu = document.querySelector('.dropdown-content');

profile.addEventListener('click', () => {
  dropdownMenu.classList.toggle('show');
});


// Chat button to show chats
const chat = document.querySelector('.chats');
const dropdownChat = document.querySelector('.chat-dropContent');

chat.addEventListener('click', () => {
  dropdownChat.classList.toggle('show');
});



// SIDEBAR PULL UP ///
document.getElementById("pullSidebar").addEventListener("click", function(e) {
    document.getElementById("sidebar").classList.toggle("show");
    });
    // Close the dropdown if the user clicks outside of it
    window.addEventListener("click", function(event) {
    if (!event.target.matches('.menu-btn')) {
        document.querySelectorAll(".left-sidebar.show")
        .forEach(openDropdown => openDropdown.classList.remove('show'))
    }
});



// Profile picture upload
// <!-- JavaScript code to handle file upload, display preview, and delete image -->
  // get a reference to the upload button, preview container, and form
  const uploadBtn = document.getElementById('upload-btn');
  const previewContainer = document.getElementById('preview-container');
  const form = document.querySelector('form');
  
  // add an event listener to the button
  uploadBtn.addEventListener('click', function(e) {
    e.preventDefault(); // prevent the default link behavior
    const input = document.createElement('input'); // create a new input element
    input.type = 'file'; // set the input type to 'file'
    input.accept = 'image/*'; // restrict the input to image files only
    input.click(); // trigger the file upload dialog
    input.addEventListener('change', function() {
      // create a new FileReader object
      const reader = new FileReader();
      
      // read the selected file and display a preview when it's loaded
      reader.onload = function() {
        const preview = document.createElement('div'); // create a new div element to hold the image and delete button
        const image = document.createElement('img'); // create a new image element
        const deleteBtn = document.createElement('button'); // create a new button element
        deleteBtn.textContent = 'Delete'; // set the text content of the delete button
        deleteBtn.addEventListener('click', function() {
          preview.remove(); // remove the preview element from the DOM when the delete button is clicked
        });
        image.src = reader.result; // set the source of the image to the data URL generated by FileReader
        preview.appendChild(image); // add the image to the preview div
        preview.appendChild(deleteBtn); // add the delete button to the preview div
        previewContainer.appendChild(preview); // add the preview div to the preview container
      };
      
      reader.readAsDataURL(input.files[0]); // read the selected file as a data URL
    });
  });

  // add an event listener to the form submit button
  // form.addEventListener('submit', function(e) {
  //   e.preventDefault(); // prevent the form from submitting normally

  //   // create a new FormData object and add the input values to it
  //   const formData = new FormData(form);
  //   const previewImage = previewContainer.querySelector('avatar');
  //   if (previewImage) {
  //     formData.append('avatar', previewImage.src); //the avatar used to be profile_picture
  //   }

  //   // submit the form using Laravel's built-in form submission feature
  //   form.submit();
  // });

  // get a reference to the file input element
  var fileInput = document.getElementById('upload-btn');

  // add an event listener for when the file input changes
  fileInput.addEventListener('change', function() {
  // get a reference to the file that was selected
  var file = fileInput.files[0];
  // create a new FormData object
  var formData = new FormData();
  // add the file to the FormData object
  formData.append('image', file);
  // send the FormData object to the server via AJAX
  $.ajax({
    url: '/profile-upload',
    method: 'POST',
    data: formData,
    processData: false,
    contentType: false,
    success: function(response) {
      // handle the server response
    },
    error: function(xhr, status, error) {
      // handle the AJAX error
    }
  });
});






///////////////////////// IMAGE CAPTURE /////////////////////////////

var capturePopupButton = document.getElementById('capture-popup-button');
var imageDataInput = document.getElementById('image-data');

capturePopupButton.addEventListener('click', function() {
  // create a new window for the canvas
  var canvasWindow = window.open('about:blank', 'canvasWindow', 'width=320,height=240');
  canvasWindow.document.write('<html><head><title>Image Capture</title></head><body></body></html>');
  var canvas = canvasWindow.document.createElement('canvas');
  canvas.width = 320;
  canvas.height = 240;
  canvasWindow.document.body.appendChild(canvas);

  // add a save button to the canvas window
  var saveButton = canvasWindow.document.createElement('button');
  saveButton.textContent = 'Save Image';
  saveButton.addEventListener('click', function() {
    // get the image data from the canvas as a data URL
    var imageData = canvas.toDataURL();
    // set the image data as the value of the hidden input field
    imageDataInput.value = imageData;
    // close the canvas window
    closeWindow(canvasWindow);
  });
  canvasWindow.document.body.appendChild(saveButton);

  // get access to the device camera
  navigator.mediaDevices.getUserMedia({ video: true })
    .then(function(stream) {
      // set the video stream as the source of the canvas
      var video = document.createElement('video');
      video.srcObject = stream;
      video.onloadedmetadata = function() {
        video.play();
        // draw the current video frame onto the canvas
        canvas.getContext('2d').drawImage(video, 0, 0, canvas.width, canvas.height);
        // stop the video stream
        stream.getTracks().forEach(function(track) {
          track.stop();
        });
      };
    })
    .catch(function(error) {
      console.error('Could not access camera: ', error);
      // close the canvas window
      closeWindow(canvasWindow);
    });
});

function closeWindow(window) {
  // close the window after a short delay
  setTimeout(function() {
    window.close();
  }, 1000);
}




//PREVIEWING CAPTURED IMAGE
var saveButton = document.getElementById('save-button');
var capturedImageDataInput = document.getElementById('image-data');
var previewContainerr = document.getElementById('preview-container');

saveButton.addEventListener('click', function() {
  // get the canvas data and update the hidden input field
  var imageData = canvas.toDataURL();
  console.log(imageData); // log the image data to the console
  capturedImageDataInput.value = imageData;
  // create a new image element and set its src attribute to the captured image data
  var image = new Image();
  image.src = imageData;
  // add the image element to the preview container
  previewContainerr.innerHTML = '';
  previewContainerr.appendChild(image);
  // hide the canvas popup window
  popup.style.display = 'none';
});

